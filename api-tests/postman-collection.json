{
  "info": {
    "name": "Simple Banking System API",
    "description": "Complete API collection for the Simple Banking System with comprehensive test scenarios",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "accountId1",
      "value": "",
      "type": "string"
    },
    {
      "key": "accountId2",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè¶ Account Management",
      "item": [
        {
          "name": "Create Account - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has account data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('balance');",
                  "    pm.expect(jsonData.name).to.eql('Alice Johnson');",
                  "    pm.expect(jsonData.balance).to.eql(1000);",
                  "});",
                  "",
                  "pm.test('Save account ID for future tests', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('accountId1', jsonData.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Alice Johnson\",\n  \"initialBalance\": 1000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/accounts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts"]
            }
          }
        },
        {
          "name": "Create Account - No Initial Balance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Balance defaults to 0', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.balance).to.eql(0);",
                  "});",
                  "",
                  "pm.test('Save second account ID', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('accountId2', jsonData.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Bob Smith\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/accounts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts"]
            }
          }
        },
        {
          "name": "Create Account - Invalid (No Name)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message for missing name', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('Name is required');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"initialBalance\": 500\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/accounts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts"]
            }
          }
        },
        {
          "name": "Get Account - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Account data is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('balance');",
                  "    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('accountId1'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/accounts/{{accountId1}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts", "{{accountId1}}"]
            }
          }
        },
        {
          "name": "Get Account - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message for not found', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/accounts/nonexistent-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts", "nonexistent-id"]
            }
          }
        }
      ]
    },
    {
      "name": "üí∞ Transactions",
      "item": [
        {
          "name": "Deposit - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Balance increased correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('newBalance');",
                  "    pm.expect(jsonData.newBalance).to.eql(1500);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 500\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/accounts/{{accountId1}}/deposit",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts", "{{accountId1}}", "deposit"]
            }
          }
        },
        {
          "name": "Deposit - Invalid Amount",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message for invalid amount', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.include('positive');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": -100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/accounts/{{accountId1}}/deposit",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts", "{{accountId1}}", "deposit"]
            }
          }
        },
        {
          "name": "Withdraw - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Balance decreased correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('newBalance');",
                  "    pm.expect(jsonData.newBalance).to.eql(1200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 300\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/accounts/{{accountId1}}/withdraw",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts", "{{accountId1}}", "withdraw"]
            }
          }
        },
        {
          "name": "Withdraw - Insufficient Funds",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message for insufficient funds', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.include('Insufficient');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 5000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/accounts/{{accountId1}}/withdraw",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts", "{{accountId1}}", "withdraw"]
            }
          }
        },
        {
          "name": "Add Balance to Second Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 250\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/accounts/{{accountId2}}/deposit",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts", "{{accountId2}}", "deposit"]
            }
          }
        },
        {
          "name": "Transfer - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Transfer completed successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('amount');",
                  "    pm.expect(jsonData).to.have.property('fromBalance');",
                  "    pm.expect(jsonData).to.have.property('toBalance');",
                  "    pm.expect(jsonData.amount).to.eql(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fromAccountId\": \"{{accountId1}}\",\n  \"toAccountId\": \"{{accountId2}}\",\n  \"amount\": 200\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/transfer",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transfer"]
            }
          }
        },
        {
          "name": "Transfer - Insufficient Funds",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message for insufficient funds', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.include('Insufficient');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fromAccountId\": \"{{accountId2}}\",\n  \"toAccountId\": \"{{accountId1}}\",\n  \"amount\": 1000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/transfer",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transfer"]
            }
          }
        },
        {
          "name": "Transfer - Missing Account IDs",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message for missing account IDs', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.include('account IDs');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/transfer",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transfer"]
            }
          }
        }
      ]
    },
    {
      "name": "üìä Transaction History",
      "item": [
        {
          "name": "Get Transaction History - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Transaction history is array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Transactions have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const transaction = jsonData[0];",
                  "        pm.expect(transaction).to.have.property('id');",
                  "        pm.expect(transaction).to.have.property('type');",
                  "        pm.expect(transaction).to.have.property('amount');",
                  "        pm.expect(transaction).to.have.property('timestamp');",
                  "        pm.expect(transaction).to.have.property('balanceAfter');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/accounts/{{accountId1}}/transactions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts", "{{accountId1}}", "transactions"]
            }
          }
        },
        {
          "name": "Get Transaction History - Account Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message for account not found', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/accounts/invalid-account-id/transactions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "accounts", "invalid-account-id", "transactions"]
            }
          }
        }
      ]
    },
    {
      "name": "üîç Health Check",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health status is OK', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('OK');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script runs before each request",
          "console.log('Running request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script runs after each request",
          "pm.test('Response time is less than 1000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});",
          "",
          "pm.test('Response has correct content type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}
