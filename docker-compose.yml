version: '3.8'

services:
  # Project initialization service
  init:
    image: node:18-alpine
    volumes:
      - .:/app
    working_dir: /app
    user: "${UID:-1000}:${GID:-1000}"
    command: >
      sh -c "
      if [ ! -f package.json ]; then
        npm init -y &&
        npm install express cors helmet uuid &&
        npm install --save-dev nodemon jest supertest &&
        mkdir -p src tests &&
        echo 'Project initialized! Now run: docker-compose up banking-api';
      else
        echo 'Project already initialized!';
      fi
      "
    profiles:
      - init

  banking-api:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
    volumes:
      # Mount source code for live development
      - ./src:/app/src
      - ./tests:/app/tests
      # Prevent node_modules from being overwritten
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    # Keep container running for interactive use
    tty: true
    stdin_open: true

  # Production version
  banking-api-prod:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - production